// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

// Event returned by watch subscription.
type Event struct {
	UID       string         `json:"uid"`
	Operation string         `json:"operation"`
	Data      map[string]any `json:"data"`
	Timestamp string         `json:"timestamp"`
}

// A message is used to communicate conditions detected while executing a query on the server.
type Message struct {
	// Unique identifier to be used by clients to process the message independently of locale or grammatical changes.
	ID string `json:"id"`
	// Message type.
	// **Values:** information, warning, error.
	Kind *string `json:"kind,omitempty"`
	// Message text.
	Description *string `json:"description,omitempty"`
}

// Queries supported by the Search Query API.
type Query struct {
}

// Defines a key/value to filter results.
// When multiple values are provided for a property, it is interpreted as an OR operation.
type SearchFilter struct {
	// Name of the property (key).
	Property string `json:"property"`
	// Values for the property. Multiple values per property are interpreted as an OR operation.
	// Optionally one of these operations `=,!,!=,>,>=,<,<=` can be included at the beginning of the value.
	// By default the equality operation is used.
	// The values available for datetime fields (Ex: `created`, `startedAt`) are `hour`, `day`, `week`, `month` and `year`.
	// Property `kind`, if included in the filter, will be matched using a case-insensitive comparison.
	// For example, `kind:Pod` and `kind:pod` will bring up all pods. This is to maintain compatibility with Search V1.
	Values []*string `json:"values"`
}

// Input options to the search query.
type SearchInput struct {
	// List of strings to match resources.
	// Will match resources containing any of the keywords in any text field.
	// When multiple keywords are provided, it is interpreted as an AND operation.
	// Matches are case insensitive.
	Keywords []*string `json:"keywords,omitempty"`
	// List of SearchFilter, which is a key(property) and values.
	// When multiple filters are provided, results will match all filters (AND operation).
	Filters []*SearchFilter `json:"filters,omitempty"`
	// Max number of results returned by the query.
	// **Default is** 10,000
	// A value of -1 will remove the limit. Use carefully because it may impact the service.
	Limit *int `json:"limit,omitempty"`
	// Filter relationships to the specified kinds.
	// If empty, all relationships will be included.
	// This filter is used with the 'related' field on SearchResult.
	RelatedKinds []*string `json:"relatedKinds,omitempty"`
}

// Subscriptions implemented by the Search Query API.
type Subscription struct {
}
